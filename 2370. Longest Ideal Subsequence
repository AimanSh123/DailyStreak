//memoization
   public int longestIdealString(String s, int k) {
        int [][] dp = new int[s.length()][27];
        for(int i = 0; i < dp.length; i++){
            Arrays.fill(dp[i],-1);
        }
        return recursion(s, k, 0,'1',dp);
    }
    public int recursion(String s, int k, int i, char ch, int [][] dp){
        if(i == s.length()){
            return 0;
        }
        if(ch == '1' && dp[i][26] != -1){
            return dp[i][26];
        }
        if(ch != '1' && dp[i][ch - 'a'] != -1){
            return dp[i][ch - 'a'];
        }
        int take = Integer.MIN_VALUE;
        if(ch == '1' || Math.abs(s.charAt(i) - ch) <= k){
            int recu =  recursion(s, k, i + 1, s.charAt(i),dp);
            take = recu == Integer.MIN_VALUE ? recu : recu + 1;
        }
        int notTake = recursion(s,k,i+1,ch,dp);
        if(ch == '1') return dp[i][26] = Math.max(take,notTake);
        return dp[i][ch - 'a'] = Math.max(take,notTake);
    }
//tabulation
  public int longestIdealString(String s, int k) {
        int [][] dp = new int[s.length() + 1][27];
        for(int i = s.length() - 1; i >= 0; i--){
            for(int j = 0; j <= 26; j++){
                int take = Integer.MIN_VALUE;
                char ch = (char) ('a' + j  - 1);
                if(ch == '`' || Math.abs(s.charAt(i) - ch) <= k){
                  int recu =  dp[i+1][s.charAt(i) - 'a' + 1];
                  take = recu == Integer.MIN_VALUE ? recu : recu + 1;
                }
                int notTake = dp[i+1][ch - 'a' + 1];
                dp[i][ch - 'a' + 1] = Math.max(take,notTake);
            }
        }
        return dp[0][0];
    }
