//using 2 stack approach
public boolean checkValidString(String s) {
        Stack<Integer> st1 = new Stack<>();
        Stack<Integer> st2 = new Stack<>();
        for(int i = 0; i < s.length(); i++){
            if(s.charAt(i) == '('){
                st1.push(i);
            }
            else if(s.charAt(i) == '*'){
                st2.push(i);
            }
            else{
                if(!st1.isEmpty()){
                    st1.pop();
                }
                else if(!st2.isEmpty()){
                    st2.pop();
                }
                else{
                    return false;
                }
            }
        }
        while(!st1.isEmpty()){
            if(st2.isEmpty()) return false;
            if(st1.peek() > st2.peek()) return false;
            st1.pop(); st2.pop();
        }
        return true;
    }

//using dp approach
 public boolean checkValidString(String s) {
       //dp approach
       return isValid(s, 0, 0);
    }
    public boolean isValid(String s, int idx, int count){
        if(idx == s.length()){
            return count == 0 ? true : false;
        }
        boolean isValidated = false;
        if(s.charAt(idx) == '('){
            isValidated = isValid(s,idx + 1, count + 1);
        }
        else if(s.charAt(idx) == ')' && count > 0){
            isValidated = isValid(s, idx + 1, count - 1);
        }
        else if(s.charAt(idx) == '*'){
               isValidated = isValid(s,idx + 1, count + 1) |
                isValid(s,idx + 1, count - 1) |
                isValid(s,idx + 1, count);
        }
        return isValidated;
    }
//memoization solution
 public boolean checkValidString(String s) {
       //dp approach
       int [][] dp = new int[s.length()][s.length()];
       for(int [] it: dp){
             Arrays.fill(it, -1);
       }
       return isValid(s, 0, 0, dp);
    }
    public boolean isValid(String s, int idx, int count, int[][] dp){
        if(idx == s.length()){
            return count == 0;
        }
        if(dp[idx][count] != -1){
            return dp[idx][count] == 1;
        }
        boolean isValidated = false;
        if(s.charAt(idx) == '('){
            isValidated = isValid(s,idx + 1, count + 1,dp);
        }
        else if(s.charAt(idx) == '*'){
               isValidated = isValid(s,idx + 1, count + 1,dp) |
                isValid(s,idx + 1, count,dp);
                if(count > 0){
                    isValidated |= isValid(s, idx + 1, count - 1,dp);
                }
        }
        else if(s.charAt(idx) == ')' && count > 0){
            isValidated = isValid(s, idx + 1, count - 1,dp);
        }
        dp[idx][count] = isValidated ? 1 : 0;
        return isValidated;
    }
//2 pointer approach
   public boolean checkValidString(String s) {
       //2 pointer
        int openCount = 0; int closeCount = 0;
        int n = s.length();
        for(int i = 0; i < s.length(); i++){
            if(s.charAt(i) == '(' || s.charAt(i) == '*') openCount++;
            else openCount--;

            if(s.charAt(n - i - 1) == ')' || s.charAt(n - i - 1) == '*') closeCount++;
            else closeCount--;
            
            if(openCount < 0 || closeCount < 0){
                return false;
            }
        }
        return true;
    
    }

