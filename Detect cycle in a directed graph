//DFS
public boolean isCyclic(int V, ArrayList<ArrayList<Integer>> adj) {
        // code here
        boolean[]visited=new boolean[V];
        boolean[]pathVisited=new boolean[V];
        for(int i=0;i<V;i++){
            if(!visited[i]){
                if(dfs(adj,visited,pathVisited,i)){
                    return true;
                }
            }
        }
        return false;
    }
    public boolean dfs(ArrayList<ArrayList<Integer>>adj,boolean[]visited,boolean[]path,int i){
        visited[i] = true;path[i]=true;
        for(int neigh: adj.get(i)){
            if(!visited[neigh]){
                if(dfs(adj,visited,path,neigh)){
                    return true;
                }
            }
            else if(path[neigh]){
                return true;
            }
        }
        path[i] = false;
        return false;
    }
//BFS
   public boolean isCyclic( ArrayList<ArrayList<Integer>> graph) {
        //count inDegree
        int [] inDegree = new int[numCourses];
        for(List<Integer> node: graph){
            for(int neigh: node){
               inDegree[neigh]++;
            }
        }Queue<Integer> q = new ArrayDeque<>();
        for(int i = 0; i < inDegree.length; i++){
            if(inDegree[i] == 0){
                q.add(i);
            }
        }
        List<Integer> topo = new ArrayList<>();
        while(!q.isEmpty()){
            int node = q.remove();
            topo.add(node);
            for(int neigh : graph.get(node)){
                inDegree[neigh]--;
                if(inDegree[neigh] == 0){
                    q.add(neigh);
                }
            }
        }
        if(topo.size() < numCourses){
            return false;
        }
        return true;
    }
