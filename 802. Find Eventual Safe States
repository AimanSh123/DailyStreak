//using dfs
public List<Integer> eventualSafeNodes(int[][] graph) {
        //nodes which are not in cycle are safe nodes
        //lets do it using dfs
        boolean[]visited=new boolean[graph.length];
        boolean[]path=new boolean[graph.length];
        boolean[]check=new boolean[graph.length];
        for(int i=0;i<graph.length;i++){
            if(!visited[i]){
                dfs(i,visited,path,check,graph);
            }
        }List<Integer>sol=new ArrayList<>();
        for(int i=0;i<graph.length;i++){ 
            if(check[i]){
                sol.add(i);
            }
        }
        return sol;
    }
    public boolean dfs(int node,boolean[]visited,boolean[]path,boolean[]check,int[][]graph){
        visited[node]=true;path[node]=true;
        for(int neigh:graph[node]){
            if(!visited[neigh]){
                if(dfs(neigh,visited,path,check,graph)){
                    check[node]=false; 
                    return true;
                }
            }
            else if(path[neigh]){
                check[node]=false;
                return true;
            }
        }
        check[node]=true;path[node]=false;
        return false;
    }
//using bfs
 public List<Integer> eventualSafeNodes(int[][] graph) {
        List<List<Integer>> revGraph = new ArrayList<>();
        for(int i=0;i<graph.length;i++){
            revGraph.add(new ArrayList<>());
        }
        for(int i=0;i<graph.length;i++){
            for(int node:graph[i]){
                revGraph.get(node).add(i);
            }
        }int []indegree=new int[graph.length];
        for(int i=0;i<revGraph.size();i++){
            for(int node:revGraph.get(i)){
                indegree[node]++;
            }
        }Queue<Integer>q=new ArrayDeque<>();
        for(int i=0;i<indegree.length;i++){
            if(indegree[i]==0){
                q.add(i);
            }
        }boolean[]check=new boolean[graph.length];
        while(!q.isEmpty()){
            int node=q.remove();
            check[node]=true;
            for(int neigh:revGraph.get(node)){
                indegree[neigh]--;
                if(indegree[neigh]==0){
                    q.add(neigh);
                }
            }
        }List<Integer>sol=new ArrayList<>();
        for(int i=0;i<check.length;i++){
            if(check[i]){
                sol.add(i);
            }
        }
        return sol;
    }
