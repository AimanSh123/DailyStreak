class Solution {
    public int mincostTickets(int[] days, int[] costs) {
        int[] dp = new int[days.length];
        Arrays.fill(dp,-1);
        return recursion(dp,days,costs, 0);
    }
    public int recursion(int[]dp,int[]days,int[]costs,int idx){
        if(idx == days.length) return 0;
        if(dp[idx] != -1) return dp[idx];
        int oneDay = costs[0] + recursion(dp,days,costs,idx + 1);
        int daysBySeven = idxCalculation(days,costs,idx,7);
        int sevenDay = costs[1] + recursion(dp,days,costs,daysBySeven);
        int daysByThirty = idxCalculation(days,costs,idx,30);
        int thirtyDay = costs[2] + recursion(dp,days,costs,daysByThirty);
        dp[idx] = Math.min(oneDay,Math.min(sevenDay,thirtyDay));
        return dp[idx];           
    }
    public int idxCalculation(int[]days,int[]costs,int idx, int daysCount){
        int currIdx = idx; int lastDay = days[idx] + daysCount - 1;
        while(currIdx < days.length && days[currIdx] <= lastDay){
            currIdx++; 
        }
        return currIdx;        
    }
}
