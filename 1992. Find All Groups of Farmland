 public int[][] findFarmland(int[][] land) {
        int n = land.length; int m = land[0].length;
        boolean[][]visited=new boolean[n][m];
        List<List<Integer>> sol = new ArrayList<>();
        for(int i = 0; i < n; i++){
            for(int j = 0; j < m; j++){
                if(!visited[i][j] && land[i][j]==1){
                    int[] gx = new int[]{i};
                    int[] gy = new int[]{j};
                    dfs(visited,land,i,j,gx,gy);
                    List<Integer> list = new ArrayList<>();
                    list.add(i); list.add(j);
                    list.add(gx[0]); list.add(gy[0]);
                    sol.add(list);
                }
            }
        } 
        int[][] ans = new int[sol.size()][4];
        for(int i = 0; i < sol.size(); i++){
            ans[i][0] = sol.get(i).get(0);
            ans[i][1] = sol.get(i).get(1);
            ans[i][2] = sol.get(i).get(2);
            ans[i][3] = sol.get(i).get(3);
        }
        return ans;         
    }
    public void dfs(boolean[][]visited,int[][]grid,int i,int j,int[]gx,int[]gy){
        if(visited[i][j] || grid[i][j] == 0){
            return;
        }
        visited[i][j] = true;
        gx[0] = Math.max(gx[0],i); gy[0] = Math.max(gy[0],j);
        if(i+1<grid.length) dfs(visited,grid,i+1,j,gx,gy);
        if(i-1>=0) dfs(visited,grid,i-1,j,gx,gy);
        if(j+1<grid[0].length) dfs(visited,grid,i,j+1,gx,gy);
        if(j-1>=0) dfs(visited,grid,i,j-1,gx,gy);   
    }
