 public int[] findOrder(int numCourses, int[][] prerequisites) {
        ArrayList<ArrayList<Integer>> graph = new ArrayList<>();
        for(int i = 0; i < numCourses; i++){
            graph.add(new ArrayList<>());
        }
        for(int i = 0; i < prerequisites.length; i++){
            graph.get(prerequisites[i][1]).add(prerequisites[i][0]);
        }
        boolean [] visited = new boolean[numCourses];
        Stack<Integer> sequence = new Stack<>();
        for(int i = 0; i < numCourses; i++){
            if(!visited[i]){
               dfs(graph, visited, sequence, i);
            }
        }
        if(sequence.size() == numCourses){
            int[] result = new int[sequence.size()]; int i = 0;
            while(!sequence.isEmpty()){
                result[i] = sequence.pop(); i++;
            }
            return result;       
        }
        return new int[numCourses];
    }
    public void dfs(ArrayList<ArrayList<Integer>>graph, boolean[]visited, Stack<Integer>seq,int u){
            visited[u] = true;
            for(int neigh: graph.get(u)){
                if(!visited[neigh]){
                    dfs(graph,visited,seq,neigh);
                }   
            }
            seq.push(u);
    }
//toposort using bfs
  public int[] findOrder(int numCourses, int[][] prerequisites) {
        ArrayList<ArrayList<Integer>> graph = new ArrayList<>();
        for(int i = 0; i < numCourses; i++){
            graph.add(new ArrayList<>());
        }
        for(int i = 0; i < prerequisites.length; i++){
            graph.get(prerequisites[i][1]).add(prerequisites[i][0]);
        }
        Queue<Integer> q = new ArrayDeque<>();
        int [] inDegree = new int[numCourses];
        for(List<Integer> node : graph){
            for(int neigh : node){
                inDegree[neigh]++;
            }
        }
        for(int i = 0; i < inDegree.length; i++){
            if(inDegree[i] == 0){
                q.add(i);
            }
        }List<Integer> topo = new ArrayList<>();
        while(!q.isEmpty()){
            int node = q.remove();
            topo.add(node);
            for(int neigh : graph.get(node)){
                inDegree[neigh]--;
                if(inDegree[neigh] == 0){
                    q.add(neigh);
                }
            }
        }
        if(topo.size() < numCourses){
            return new int[0];
        }
        int [] sol = new int[numCourses];
        for(int i = 0; i < topo.size(); i++){
            sol[i] = topo.get(i);
        }
        return sol;
    }  
