 int count;
    public int reachableNodes(int n, int[][] edges, int[] restricted) {
        boolean [] visited = new boolean[n];
        for(int it: restricted){
            visited[it] = true;
        }
        List<List<Integer>> graph = new ArrayList<>();
        for(int i = 0; i < n; i++){
            graph.add(new ArrayList<>());
        }
        for(int [] edge: edges){
            graph.get(edge[0]).add(edge[1]);
            graph.get(edge[1]).add(edge[0]);
        }
        count = 0;
        dfs(graph,0,visited);
        return count;
    }
    public void dfs(List<List<Integer>>graph,int node,boolean[]visited){
        visited[node] = true;
        count++;
        for(int neigh:graph.get(node)){
            if(!visited[neigh]){
                dfs(graph,neigh,visited);
            }  
        }
        visited[node] = false;
    }
