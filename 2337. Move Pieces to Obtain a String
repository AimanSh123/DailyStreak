class Solution {
    public boolean canChange(String start, String target) {
        int n = start.length();
        int R_start = 0; int L_start = 0;
        int R_target = 0; int L_target = 0;
        for(int i = 0; i < n; i++){
            if(start.charAt(i) == 'L') L_start++;
            if(start.charAt(i) == 'R') R_start++;
            if(target.charAt(i) == 'L') L_target++;
            if(target.charAt(i) == 'R') R_target++;
        }
        int i = 0; int j = 0;
        while(i < n && j < n){
            while(i < n && start.charAt(i) == '_') i++;
            while(j < n && target.charAt(j) == '_') j++;
            if(i < n && j < n && start.charAt(i) != target.charAt(j)) return false;
            if(i < n && j < n && start.charAt(i) == 'R' && i > j) return false;
            else if(i < n && j < n && start.charAt(i) == 'L' && i < j) return false;
            i++;j++;
        }
        return L_start == L_target && R_start == R_target;          
    }
}
class Solution {
    public boolean canChange(String start, String target) {
        int n = start.length();
        int R_start = 0; int L_start = 0;
        int R_target = 0; int L_target = 0;
        for(int i = 0; i < n; i++){
            if(start.charAt(i) == 'L') L_start++;
            if(start.charAt(i) == 'R') R_start++;
            if(target.charAt(i) == 'L') L_target++;
            if(target.charAt(i) == 'R') R_target++;
        }
        if(L_start != L_target || R_start != R_target)
            return false;   
        int i = 0; int j = 0;
        while(i < n && j < n){
            while(i < n && start.charAt(i) == '_') i++;
            while(j < n && target.charAt(j) == '_') j++;
            if(i < n && j < n){
                if(start.charAt(i) != target.charAt(j)) return false;
                if(start.charAt(i) == 'R' && i > j) return false;
                else if(start.charAt(i) == 'L' && i < j) return false;
            }
            i++;j++;
        }
        return true;          
    }
}
