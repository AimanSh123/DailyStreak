//recursion
   public int lengthOfLIS(int[] nums) {
        return recursion(nums, -1, 0);
    }
    public int recursion(int [] nums, int prev, int curr){
        if(curr == nums.length){
            return 0;
        }
        int not_Take = recursion(nums, prev, curr + 1);
        int take = Integer.MIN_VALUE;
        if(prev == -1 || nums[curr] > nums[prev]){
            take = recursion(nums, curr, curr + 1) + 1;
        }
        return take > not_Take ? take : not_Take;
    }
//memoization
public int lengthOfLIS(int[] nums) {
        int [][] dp = new int[nums.length + 1][nums.length];
        for(int i = 0; i < dp.length; i++){
            Arrays.fill(dp[i], -1);
        }
        return recursion(dp, nums, -1, 0);
    }
    public int recursion(int [][] dp, int [] nums, int prev, int curr){
        if(curr == nums.length){
            return 0;
        }
        if(dp[prev + 1][curr] != -1){
             return dp[prev + 1][curr];
        }
        int not_Take = recursion(dp, nums, prev, curr + 1);
        int take = Integer.MIN_VALUE;
        if(prev == -1 || nums[curr] > nums[prev]){
            take = recursion(dp, nums, curr, curr + 1) + 1;
        }
        return dp[prev + 1][curr] = take > not_Take ? take : not_Take;
    }
//tabulation
 public int lengthOfLIS(int[] nums) {
       int [][] dp = new int[nums.length + 1][nums.length+1];
       for(int idx = nums.length - 1; idx >= 0; idx--){
            for(int prev = idx - 1; prev >= -1; prev--){
                int not_Take = dp[prev+1][idx+1];
                int take = Integer.MIN_VALUE;
                if(prev == -1 || nums[idx] > nums[prev]){
                    take = dp[idx+1][idx+1] + 1;
                }
                dp[prev + 1][idx] = take > not_Take ? take : not_Take;
            }
       }
       return dp[0][0];
    }
//space optimisation
 public int lengthOfLIS(int[] nums) {
       int [] dp = new int[nums.length + 1];
       for(int idx = nums.length - 1; idx >= 0; idx--){
            int [] dp2 = new int[nums.length + 1];
            for(int prev = idx - 1; prev >= -1; prev--){
                int not_Take = dp[prev+1];
                int take = Integer.MIN_VALUE;
                if(prev == -1 || nums[idx] > nums[prev]){
                    take = dp[idx+1] + 1;
                }
                dp2[prev + 1] = take > not_Take ? take : not_Take;
            }
            dp = dp2;
       }
       return dp[0];
    }
//optimal approach
  public int lengthOfLIS(int[] nums) {
        int[] dp = new int[nums.length];
        Arrays.fill(dp, 1); int len = 1;
        for (int i = 0; i < nums.length; i++) {
            for (int j = 0; j < i; j++) {
                if (nums[i] > nums[j]) {
                    dp[i] = Math.max(dp[i], 1 + dp[j]);
                }
            }
            len = Math.max(len, dp[i]);
        }
        return len;

    }
//using binary search
public static int longestIncreasingSubsequence(int arr[]) {
		//Your code goes here
		List<Integer> temp = new ArrayList<>();
		int len = 1; temp.add(arr[0]);
		for(int i = 1; i < arr.length; i++){
			if(arr[i] > temp.get(temp.size() - 1)){
				temp.add(arr[i]);
				len++;
			}
			else{
				int idx = Collections.binarySearch(temp, arr[i]);
				if(idx < 0){
					idx = -idx - 1;
				}
				temp.set(idx, arr[i]);
			}
		}
		return len;
	}

