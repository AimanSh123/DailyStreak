//recursion
 public int minDistance(String word1, String word2) {
          return recursion(word1, word2, word1.length() - 1, word2.length() - 1);
    }
    public int recursion(String word1, String word2, int idx1, int idx2){
        if(idx1 < 0){
            return idx2 + 1;
        }
        if(idx2 < 0){
            return idx1 + 1;
        }
        if(word1.charAt(idx1) == word2.charAt(idx2)){
            return recursion(word1, word2, idx1 - 1, idx2 - 1);
        }
        else{
           return 1 + Math.min(recursion(word1, word2, idx1, idx2 - 1), Math.min (recursion(word1, word2, idx1 - 1, idx2), recursion(word1, word2, idx1 - 1, idx2 - 1)));
        }
    }

//memoization
 public int minDistance(String word1, String word2) {
        int [][] dp = new int[word1.length()][word2.length()];
        for(int i = 0; i < dp.length; i++){
            Arrays.fill(dp[i], -1);
        }
        return recursion(dp, word1, word2, word1.length() - 1, word2.length() - 1);
    }
    public int recursion(int [][] dp, String word1, String word2, int idx1, int idx2){
        if(idx1 < 0){
            return idx2 + 1;
        }
        if(idx2 < 0){
            return idx1 + 1;
        }
        if(dp[idx1][idx2] != -1){
            return dp[idx1][idx2];
        }
        if(word1.charAt(idx1) == word2.charAt(idx2)){
            return dp[idx1][idx2] = recursion(dp, word1, word2, idx1 - 1, idx2 - 1);
        }
        else{
           return dp[idx1][idx2] = 1 + Math.min(recursion(dp,word1, word2, idx1, idx2 - 1), Math.min (recursion(dp, word1, word2, idx1 - 1, idx2), recursion(dp, word1, word2, idx1 - 1, idx2 - 1)));
        }
    }
     

//tabulation
 public int minDistance(String word1, String word2) {
        // int [][] dp = new int[word1.length() + 1][word2.length() + 1];
        // for(int j = 0; j <= word2.length(); j++){
        //     dp[0][j] = j;
        // }
        // for(int i = 0; i <= word1.length(); i++){
        //     dp[i][0] = i;
        // }
        // for(int i = 1; i <= word1.length(); i++){
        //     for(int j = 1; j <= word2.length(); j++){
        //          if(word1.charAt(i - 1) == word2.charAt(j - 1)){
        //            dp[i][j] = dp[i - 1][j - 1];
        //            continue;
        //           }
        //            int insert = 1 +  dp[i][j - 1];
        //            int delete = 1 +  dp[i - 1][j];
        //            int replace = 1 +  dp[i - 1][j - 1];
        //             dp[i][j] = Math.min(insert, Math.min(delete, replace));
    
        //     }
        // }
       
        // return dp[word1.length()][word2.length()];
    }
     
