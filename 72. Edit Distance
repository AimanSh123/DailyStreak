//recursion
 public int minDistance(String word1, String word2) {
          return recursion(word1, word2, word1.length() - 1, word2.length() - 1);
    }
    public int recursion(String word1, String word2, int idx1, int idx2){
        if(idx1 < 0){
            return idx2 + 1;
        }
        if(idx2 < 0){
            return idx1 + 1;
        }
        if(word1.charAt(idx1) == word2.charAt(idx2)){
            return recursion(word1, word2, idx1 - 1, idx2 - 1);
        }
        else{
           return 1 + Math.min(recursion(word1, word2, idx1, idx2 - 1), Math.min (recursion(word1, word2, idx1 - 1, idx2), recursion(word1, word2, idx1 - 1, idx2 - 1)));
        }
    }

//memoization
 public int minDistance(String word1, String word2) {
        int [][] dp = new int[word1.length()][word2.length()];
        for(int i = 0; i < dp.length; i++){
            Arrays.fill(dp[i], -1);
        }
        return recursion(dp, word1, word2, word1.length() - 1, word2.length() - 1);
    }
    public int recursion(int [][] dp, String word1, String word2, int idx1, int idx2){
        if(idx1 < 0){
            return idx2 + 1;
        }
        if(idx2 < 0){
            return idx1 + 1;
        }
        if(dp[idx1][idx2] != -1){
            return dp[idx1][idx2];
        }
        if(word1.charAt(idx1) == word2.charAt(idx2)){
            return dp[idx1][idx2] = recursion(dp, word1, word2, idx1 - 1, idx2 - 1);
        }
        else{
           return dp[idx1][idx2] = 1 + Math.min(recursion(dp,word1, word2, idx1, idx2 - 1), Math.min (recursion(dp, word1, word2, idx1 - 1, idx2), recursion(dp, word1, word2, idx1 - 1, idx2 - 1)));
        }
    }
     

//tabulation
 public int editDistance(String str1, String str2) {
        // Code here
        int [][] dp = new int[str1.length() + 1][str2.length() + 1];
        for(int i = 0; i < str1.length(); i++){
            dp[i][str2.length()] = str1.length() - i;
        }
        for(int j = 0; j < str2.length(); j++){
            dp[str1.length()][j] = str2.length() - j;
        }
        for(int i = str1.length() - 1; i >= 0; i--){
            for(int j = str2.length() - 1; j >= 0; j--){
                int take = Integer.MAX_VALUE;
                if(str1.charAt(i) == str2.charAt(j)){
                  take = dp[i+1][j+1]; 
                }
                int insert = dp[i][j + 1] + 1;
                int delete = dp[i+1][j] + 1;
                int replace = dp[i+1][j+1] + 1;
                int operation = Math.min(insert, Math.min(delete, replace));
                dp[i][j] = Math.min(take, operation);
            }
        }
        return dp[0][0];
    }
