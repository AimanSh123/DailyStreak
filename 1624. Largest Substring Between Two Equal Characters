//brute force : time complexity: n^2
 public int maxLengthBetweenEqualCharacters(String s) {
        int max_len = Integer.MIN_VALUE;
        int n = s.length();
        for(int i = 0; i < n; i++){
           for(int j = n - 1; j > i; j--){
               if(s.charAt(i) == s.charAt(j)){
                   max_len = Math.max(max_len, j - i - 1);
               }
           }
        }
        return max_len == Integer.MIN_VALUE ? -1 : max_len;    
    }
//using map
 public int maxLengthBetweenEqualCharacters(String s) {
        int max_len = Integer.MIN_VALUE;
        int n = s.length();
        HashMap<Character, Integer> map = new HashMap<>();
        for(int i = 0; i < n; i++){
            if(map.containsKey(s.charAt(i))){
                max_len = Math.max(i - map.get(s.charAt(i)) - 1, max_len);
            }
            else{
                map.put(s.charAt(i), i);
            }
        }
        return max_len == Integer.MIN_VALUE ? -1 : max_len;    
 }
//using array
  public int maxLengthBetweenEqualCharacters(String s) {
        int max_len = Integer.MIN_VALUE;
        int n = s.length();
        int [] v1 = new int[26];
        Arrays.fill(v1, -1);
        for(int i = 0; i < n; i++){
            if(v1[s.charAt(i) - 'a'] == -1){
                v1[s.charAt(i) - 'a'] = i;
            }
            else{
                max_len = Math.max(max_len, i - v1[s.charAt(i) - 'a'] - 1);
            }
        }
        return max_len == Integer.MIN_VALUE ? -1 : max_len;    
    }
