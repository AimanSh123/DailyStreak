  public long totalCost(int[] costs, int k, int candidates) {
        PriorityQueue<Integer> pq1 = new PriorityQueue<>();
        PriorityQueue<Integer> pq2 = new PriorityQueue<>();
        long cost = 0; int i = 0, j = costs.length - 1;
        while(k != 0){
            while(pq1.size() < candidates && i <= j){
                pq1.add(costs[i]); i++;
            }
            while(pq2.size() < candidates && i <= j){
                pq2.add(costs[j]); j--;
            }
            int mini1 = pq1.size() > 0 ? pq1.peek() : Integer.MAX_VALUE;
            int mini2 = pq2.size() > 0 ? pq2.peek() : Integer.MAX_VALUE;
            if(mini1 <= mini2){
                 cost += mini1;
                 pq1.remove();
            }
            else{
                cost += mini2;
                pq2.remove();
            }
            k--;
        }
        return cost;
    }
