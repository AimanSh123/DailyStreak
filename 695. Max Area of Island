public int maxAreaOfIsland(int[][] grid) {
        //lets do it with bfs
        int n = grid.length; int m = grid[0].length;
        boolean[][]visited = new boolean[n][m];
        int maxiCount = 0;
        for(int i = 0; i < n; i++){
            for(int j = 0; j < m; j++){
                if(!visited[i][j] && grid[i][j] == 1){
                   int count = bfs(visited,grid,i,j);
                   maxiCount = Math.max(maxiCount,count);
                }
            }
        }
        return maxiCount;
    }
    public int bfs(boolean[][]visited,int[][]grid,int i, int j){
        Queue<Pair>q = new ArrayDeque<>();
        q.add(new Pair(i,j));
        visited[i][j] = true;
        int count = 0;
        while(!q.isEmpty()){
            Pair p = q.remove();
            count++;
            i = p.row;  j = p.col;
            if(i+1<grid.length && !visited[i+1][j] && grid[i+1][j]==1){
                    visited[i+1][j] = true;
                    q.add(new Pair(i+1,j));
            }
            if(j+1<grid[0].length && !visited[i][j+1] && grid[i][j+1]==1){
                visited[i][j+1] = true;
                q.add(new Pair(i,j+1));
            }
            if(i-1>=0 && !visited[i-1][j] && grid[i-1][j]==1){
                visited[i-1][j] = true;
                q.add(new Pair(i-1,j));
            }
            if(j-1>=0 && !visited[i][j-1] && grid[i][j-1]==1){
                visited[i][j-1] = true;
                q.add(new Pair(i,j-1));
            }
        }
        return count;
    }
    class Pair{
        int row, col;
        Pair(int row, int col){
            this.row = row;
            this.col = col;
        }
    }
