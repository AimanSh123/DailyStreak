 public int findTheCity(int n, int[][] edges, int distanceThreshold) {
        List<List<Pair>> graph = new ArrayList<>();
        for(int i = 0; i < n; i++){
            graph.add(new ArrayList<>());
        }
        for(int [] edge : edges){
            graph.get(edge[0]).add(new Pair(edge[1],edge[2]));
            graph.get(edge[1]).add(new Pair(edge[0],edge[2]));
        }
        PriorityQueue<int []> pq = new PriorityQueue<>((a,b)->{
            if(a[1] == b[1]){
                return b[0] - a[0]; //city with greater number
            }
            else{
                return a[1] - b[1];
            }
        });
        for(int i = 0; i < n; i++){
            int [] connectCities = bfs(i, graph, distanceThreshold);
             pq.add(connectCities);
        }
        return pq.remove()[0];
    }
    int [] bfs(int node, List<List<Pair>> graph, int threshold){
        int [] dist = new int[graph.size()];
        Arrays.fill(dist, Integer.MAX_VALUE);
        PriorityQueue<Pair> pq = new PriorityQueue<>((a,b)->a.distance - b.distance);
        pq.add(new Pair(node,0));
        dist[node] = 0;
        while(!pq.isEmpty()){
            Pair p = pq.remove();
            int distNode = p.distance;
            int curr_node = p.node;
            for(Pair neigh : graph.get(curr_node)){
                if(dist[neigh.node] > neigh.distance + distNode){
                    dist[neigh.node] = neigh.distance + distNode;
                    pq.add(new Pair(neigh.node,neigh.distance + distNode));
                }
            } 
        }
        int counter = 0;
        for(int it: dist){
            if(it <= threshold) counter++;
        }
        return new int[]{node,counter};
    }
    class Pair{
        int node; int distance;
        Pair(int node, int distance){
            this.node = node;
            this.distance = distance;
        }
    }
