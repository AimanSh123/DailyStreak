  public double maxProbability(int n, int[][] edges, double[] succProb, int start_node, int end_node) {
        double [] dist = new double[n];
        List<List<Pair>> graph = new ArrayList<>();
        for(int i = 0; i < n; i++){
            graph.add(new ArrayList<>());
        }
        for(int i=0; i<edges.length; i++){
            graph.get(edges[i][0]).add(new Pair(edges[i][1],succProb[i]));
            graph.get(edges[i][1]).add(new Pair(edges[i][0],succProb[i]));
        }
        PriorityQueue<Pair> pq = new PriorityQueue<>((a, b) -> Double.compare(b.prob, a.prob));
        pq.add(new Pair(start_node,1.0));
        while(!pq.isEmpty()){
            Pair p = pq.remove();
            int node = p.dst;
            for(Pair neigh : graph.get(node)){
                if(dist[neigh.dst] < neigh.prob * p.prob){
                    dist[neigh.dst] = neigh.prob * p.prob;
                    pq.add(new Pair(neigh.dst,neigh.prob * p.prob));
                } 
            }
        }
        return dist[end_node];

    }
    class Pair{
        int dst; double prob;
        Pair(int dst, double prob){
            this.dst = dst; this.prob = prob;
        }
    } 
