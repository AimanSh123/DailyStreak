    static int knapSack(int W, int wt[], int val[]) {
        // your code here
        int[][]dp = new int[wt.length][W + 1];
        for(int[] row : dp)
           Arrays.fill(row,-1);
        return recursion(dp,W,wt,val,0);
    }
    static int recursion(int[][]dp,int W,int[]wt,int[]val,int idx){
        if(idx == wt.length){
            if(W >= 0) return 0;
            else return Integer.MIN_VALUE;
        }
        if(dp[idx][W] != -1) return dp[idx][W];
        int pick = Integer.MIN_VALUE;
        if(wt[idx] <= W){
            pick = val[idx] + recursion(dp,W-wt[idx],wt,val,idx+1);
        }
        int notPick = recursion(dp,W,wt,val,idx+1);
        return dp[idx][W] = Math.max(pick,notPick);
    }
//optimal approach
 static int knapSack(int W, int wt[], int val[]) {
        // your code here
        int[][]dp = new int[wt.length+1][W + 1];
        for(int idx = wt.length - 1; idx >= 0; idx--){
            for(int j = W; j >= 0; j--){
                int pick = Integer.MIN_VALUE;
                if(wt[idx] <= j){
                   pick = val[idx] + dp[idx+1][j-wt[idx]];
                }
                int notPick =dp[idx+1][j];
                dp[idx][j] = Math.max(pick,notPick);
            }
        }  
        return dp[0][W];
    }
