  public void solve(char[][] board) {
        //bfs
        int m = board.length; int n = board[0].length;
        Queue<Pair<Integer,Integer>> q = new ArrayDeque<>();
        for(int i = 0; i < m; i++){
            if(board[i][0] == 'O'){
                q.add(new Pair(i,0));
            }
            if(board[i][n - 1] == 'O'){
                q.add(new Pair(i,n-1));
            }
        }
        for(int i = 0; i < n; i++){
            if(board[0][i] == 'O'){
                q.add(new Pair(0,i));
            }
            if(board[m - 1][i] == 'O'){
                q.add(new Pair(m-1,i));
            }
        }
        int [] dx = {-1,0,1,0}; int [] dy = {0,-1,0,1};
        while(!q.isEmpty()){
            System.out.println("did it come here");
            Pair<Integer,Integer> p = q.remove(); 
            int row_p = p.getKey(); int col_p = p.getValue();
            board[row_p][col_p] = '1';
            for(int i = 0; i < 4; i++){
                int row = row_p + dx[i]; int col = col_p + dy[i];
                if(row < m && row >= 0 && col < n && col >= 0 && board[row][col] == 'O'){
                    q.add(new Pair(row,col));
                    board[row][col] = '1';
                }  
            }
        }
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(board[i][j] == 'O'){
                    board[i][j] = 'X';
                }
                else if(board[i][j] == '1'){
                    board[i][j] = 'O';
                }
            }
        }      
    }
