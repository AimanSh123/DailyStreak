//memoization
  public int minFallingPathSum(int[][] matrix) {
       int m = matrix.length; int n = matrix[0].length;
       int mini = Integer.MAX_VALUE;
       int [][] dp = new int[m][n];
       for(int i = 0; i < n; i++){
           Arrays.fill(dp[i],-1);
       }
       for(int i = 0; i < n; i++){
           mini =  Math.min(mini, recursion(0, i, matrix, dp));
       }
       return mini;
    }
    public int recursion(int i, int j, int [][] matrix, int [][] dp){
        if(j < 0 || j >= matrix[0].length){
            return Integer.MAX_VALUE;
        }
        if(i == matrix.length){
            return 0;
        }
        if(dp[i][j] != -1){
            return dp[i][j];
        }
        return dp[i][j] = matrix[i][j] + Math.min(recursion(i+1, j - 1, matrix, dp), Math.min(recursion(i+1, j, matrix, dp), recursion(i+1, j + 1, matrix, dp)));
    }
//tabulation
  public int minFallingPathSum(int[][] matrix) {
       int m = matrix.length; int n = matrix[0].length;
       int mini = Integer.MAX_VALUE;
       int [][] dp = new int[m][n];
       for(int i = 0; i < n; i++){
            dp[m - 1][i] = matrix[m - 1][i];
       }
       for(int i = m - 2; i >= 0; i--){
           for(int j = 0; j < n; j++){
               int ans = Integer.MAX_VALUE;
               ans = Math.min(ans,matrix[i][j] + dp[i+1][j]);
               if(j - 1 >= 0){
                   ans = Math.min(ans, matrix[i][j] + dp[i+1][j-1]);
               }
               if(j + 1 < n){
                   ans = Math.min(ans, matrix[i][j] + dp[i+1][j+1]);
               }
               dp[i][j] = ans;
           }

       }
       for(int i = 0; i < n; i++){
            mini =  Math.min(mini, dp[0][i]);
       }
       return mini;
    }
