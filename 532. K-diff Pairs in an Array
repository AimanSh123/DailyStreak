//using Binary Search
 public int findPairs(int[] nums, int k) {
        Arrays.sort(nums); int cnt = 0;
        for(int i = 0; i < nums.length - 1; i++){
            int target = nums[i] + k;
            int left = i + 1; int right = nums.length - 1;
            while(left <= right){
                int mid = (left + right)/2;
                if(nums[mid] == target){
                     cnt++;
                     break;
                }  
                if(nums[mid] < target){
                    left = mid + 1;
                }
                else{
                    right = mid - 1;
                }
            }
            while(i + 1 < nums.length && nums[i] == nums[i+1]){
                i++;
            }
        }
        return cnt;     
    }
//using 2 pointer approach
  public int findPairs(int[] nums, int k) {
        Arrays.sort(nums);
        int count = 0;
        int i = 0;
        int j = 1;
        while (i < nums.length && j < nums.length) {
            if (nums[j] - nums[i] == k) {
                i++;
                j++;
                count++;
                while (j < nums.length && nums[j] == nums[j - 1]) {
                    j++;
                }
            } else if (nums[j] - nums[i] > k) {
                i++;
                if (j == i) {
                    j++;
                }
            } else {
                j++;
            }
        }
        return count;
    }
//using hashmap
 public int findPairs(int[] nums, int k) {
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int it : nums) {
            map.put(it, map.getOrDefault(it, 0) + 1);
        }
        int count = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (k == 0 && entry.getValue() > 1) {
                count++;
            } else if (k > 0 && map.containsKey(entry.getKey() + k)) {
                count++;
            }
        }
        return count;
    }
