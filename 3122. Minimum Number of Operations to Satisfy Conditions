    public int minimumOperations(int[][] grid) {
        int minAns = Integer.MAX_VALUE;
        int m = grid.length;
        int n = grid[0].length;
        int [][] dp = new int[n][10];
        for(int i = 0; i < dp.length; i++)
            Arrays.fill(dp[i],-1);
        for (int keep = 0; keep <= 9; keep++) {
            minAns = Math.min(minAns, recursion(grid, 0, keep,dp));
        }
        return minAns;
    }

    public int recursion(int[][] grid, int j, int keep,int[][]dp) {
        if (j == grid[0].length) {
            return 0;
        }
        if(dp[j][keep] != -1)
           return dp[j][keep];
        int cost = 0;
        for (int i = 0; i < grid.length; i++) {
            if (grid[i][j] != keep)
                cost++;
        }
        int minAns = Integer.MAX_VALUE;
        for (int digit = 0; digit <= 9; digit++) {
            if (digit == keep)
                continue;
            minAns = Math.min(minAns, cost + recursion(grid,j + 1,digit,dp));
        }
        return dp[j][keep] = minAns;

    }
