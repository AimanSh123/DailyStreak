//memoization
   public int rob(int[] nums) {
        int []dp = new int[nums.length];
        Arrays.fill(dp, -1);
        return recursion(dp, nums, 0);
    }
    public int recursion(int [] dp, int [] nums, int idx){
        if(idx >= nums.length){
            return 0;
        }
        if(idx == nums.length - 1){
             return nums[idx];
        }
        if(dp[idx] != -1){
            return dp[idx];
        }
        int not_take = recursion(dp, nums, idx + 1);
        int take = nums[idx] + recursion(dp, nums, idx + 2);
        return dp[idx] = Math.max(not_take, take);
    }
    //tabulation
     public int rob(int[] nums) {
        int n = nums.length; int []dp = new int[n + 1];
        dp[n] = 0; dp[n - 1] = nums[n - 1];
        for(int i = n - 2; i >= 0; i--){
            int not_take = dp[i+1];
            int take = nums[i] + dp[i + 2];
            dp[i] = Math.max(not_take, take);
        }
        return dp[0];
    }
    //space optimisation
     public int rob(int[] nums) {
        int n = nums.length;
        if(n == 1){
            return nums[0];
        }
        int prev2 = 0; int prev = nums[n - 1]; int curr = 0;
        for(int i = n - 2; i >= 0; i--){
            int not_take = prev;
            int take = nums[i] + prev2;
            curr = Math.max(not_take, take);
            prev2 = prev; prev= curr;
        }
        return curr;
    }
