  public static int findNumberOfGoodComponent(int e, int v, int[][] edges) {
        //let's do it with bfs
        boolean[] visited = new boolean[v+1];
        int count = 0;
        List<List<Integer>> graph = new ArrayList<>();
        for(int i = 0; i <= v; i++) graph.add(new ArrayList<>());
        for(int [] edge: edges){
            graph.get(edge[0]).add(edge[1]);
            graph.get(edge[1]).add(edge[0]);
        }
        for(int i = 1; i <= v; i++){
            if(!visited[i]){
              if(bfs(i,graph,visited)){
                count++;
              }
            }
        }
        return count;
    }
    public static boolean bfs(int node, List<List<Integer>> graph, boolean[] visited){
        Queue<Integer> q = new ArrayDeque<>();
        q.add(node); visited[node] = true;
        int edges = graph.get(node).size();
        int nodes = 0;
        boolean goodComp = true;
        while(!q.isEmpty()){
            int curr_node = q.remove();
            nodes++;
            if(graph.get(curr_node).size() != edges) goodComp = false;
            for(int neigh: graph.get(curr_node)){
                if(!visited[neigh]){
                    visited[neigh] = true;
                    q.add(neigh);
                }
            }
        }
        return goodComp && edges + 1 == nodes;
    }
