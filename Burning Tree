 public static int minTime(Node root, int target){
        HashMap<Node,Node>map = new HashMap<>();
        Node tar = dfs(root, map, target);
        
        Queue<Node> q = new ArrayDeque<>();
        q.add(tar); int time = 0;
        HashSet<Node> visited = new HashSet<>();
        visited.add(tar);
        while(!q.isEmpty()){
            int size = q.size();
            boolean isSpread = false;
            for(int i = 0; i < size; i++){
                Node curr = q.remove();
                if(map.containsKey(curr) && !visited.contains(map.get(curr))){
                     visited.add(map.get(curr));
                    q.add(map.get(curr));
                    isSpread = true;
                }
                if(curr.left != null && !visited.contains(curr.left)){
                    visited.add(curr.left);
                    q.add(curr.left);
                    isSpread = true;
                }
                if(curr.right != null && !visited.contains(curr.right)){
                      visited.add(curr.right);
                    q.add(curr.right);
                    isSpread = true;
                }
            }
            if(isSpread) time++;
        }
        return time;
    }


    public static Node dfs(Node root,HashMap<Node,Node>map,int target){
        Node left = null; Node right = null;
        if(root.left != null){
            map.put(root.left,root);
            left = dfs(root.left,map,target);
        }
        if(root.right != null){
            map.put(root.right,root);
            right = dfs(root.right,map,target);
        }
        if(root.data == target){
            return root;
        }
        if(left != null && left.data == target)
           return left;
        if(right != null && right.data == target)
            return right;
        return null;
    }
