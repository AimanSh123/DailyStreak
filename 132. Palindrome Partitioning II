//recursion
  public int minCut(String s) {
        return recursion(s, 0) - 1;   
    }
    public int recursion(String s, int idx){
        if(idx == s.length()){
            return 0;
        } 
        int minCost = Integer.MAX_VALUE; 
        String temp = "";
        for(int i = idx; i < s.length(); i++){
            temp += s.charAt(i);
            if(isPal(temp)){
                int cost = 1 + recursion(s, i + 1);
                minCost = Math.min(minCost, cost);
            }
        }
        return minCost;
    }
    public boolean isPal(String s){
        int i = 0; int j = s.length() - 1;
        while(i <= j){
            if(s.charAt(i) != s.charAt(j)){
                return false;
            }
            i++;j--;
        }
        return true;
    }
//memoization
  public int minCut(String s) {
        int [] dp = new int[s.length()];
        Arrays.fill(dp, -1);
        return recursion(dp, s, 0) - 1;   
    }
    public int recursion(int [] dp, String s, int idx){
        if(idx == s.length()){
            return 0;
        } 
        if(dp[idx] != -1){
            return dp[idx];
        }
        int minCost = Integer.MAX_VALUE; 
        String temp = "";
        for(int i = idx; i < s.length(); i++){
            temp += s.charAt(i);
            if(isPal(temp)){
                int cost = 1 + recursion(dp, s, i + 1);
                minCost = Math.min(minCost, cost);
            }
        }
        return dp[idx] = minCost;
    }
    public boolean isPal(String s){
        int i = 0; int j = s.length() - 1;
        while(i <= j){
            if(s.charAt(i) != s.charAt(j)){
                return false;
            }
            i++;j--;
        }
        return true;
    }
//tabulation
  public int minCut(String s) {
        int [] dp = new int[s.length() + 1];
        for(int idx = s.length() - 1; idx >= 0; idx--){
            int minCost = Integer.MAX_VALUE; 
            String temp = "";
            for(int i = idx; i < s.length(); i++){
                temp += s.charAt(i);
                if(isPal(temp)){
                    int cost = 1 + dp[i+1];
                    minCost = Math.min(minCost, cost);
                }
            }
            dp[idx] = minCost;
        }
        return dp[0] - 1;   
    }
    public boolean isPal(String s){
        int i = 0; int j = s.length() - 1;
        while(i <= j){
            if(s.charAt(i) != s.charAt(j)){
                return false;
            }
            i++;j--;
        }
        return true;
    }
