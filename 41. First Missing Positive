//using hashset (not the most optimal approach)
  public int firstMissingPositive(int[] nums) {
        HashSet<Integer> set = new HashSet<>();
        for(int i = 0; i < nums.length; i++){
            set.add(nums[i]);
        }
        for(int i = 1; i <= nums.length; i++){
            if(!set.contains(i)){
                return i;
            }
        }
        return nums.length + 1;
    }
//most optimal approach
 public int firstMissingPositive(int[] nums) {
        for(int i = 0; i < nums.length; i++){
            if(nums[i] <= 0 || nums[i] > nums.length){
                continue;
            }
            int chair = nums[i] - 1;
            int element = nums[i];
            if(nums[chair] != element){
                swap(nums, nums[i] - 1, i);
                i--;
            }
        }
        for(int i = 0; i < nums.length; i++){
            if(nums[i] != i + 1){
                return i+1; 
            }
        }
        return nums.length + 1;
    }
    public void swap(int [] nums, int i, int j){
           int temp = nums[i];
           nums[i] = nums[j];
           nums[j] = temp;
    }
