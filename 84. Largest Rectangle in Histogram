//brute force
  public int largestRectangleArea(int[] heights) {
        int n = heights.length;
        int [] right = new int[n];
        int [] left = new int[n];
        Stack<Integer> st = new Stack<>();
        for(int i = 0; i < n; i++){
            while(!st.isEmpty() && heights[st.peek()]>=heights[i]){
                st.pop();
            }
            if(st.isEmpty()) left[i] = 0;
            else{ 
                left[i] = st.peek() + 1;
            }
            st.push(i);
        }
        st = new Stack<>();
        for(int i = n - 1; i >= 0; i--){
            while(!st.isEmpty() && heights[st.peek()] >= heights[i]){
                st.pop();
            }
            if(st.isEmpty()) right[i] = n - 1;
            else  right[i] = st.peek() - 1;
            st.push(i);
        }
        int sol = 0;
        for(int i = 0; i < n; i++){
           sol = Math.max(sol,(right[i]-left[i]+1)*heights[i]);
        }
        return sol;
    } 
//optimal approach
  public int largestRectangleArea(int[] heights) {
        int n = heights.length;
        int maxArea = 0;
        Stack<Integer> st = new Stack<>();
        for(int i = 0; i <= n; i++){
            while(!st.isEmpty() && (i == n || heights[st.peek()] >= heights[i])){
                int height = heights[st.pop()];
                int width;
                if(st.isEmpty()) width = i;
                else width = i - st.peek() - 1;
                maxArea = Math.max(maxArea,height * width);
            }
            st.push(i);
        }
        return maxArea;
      
    } 
