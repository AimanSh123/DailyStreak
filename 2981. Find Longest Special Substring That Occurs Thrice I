//brute force approach
public int maximumLength(String s) {
        HashMap<String, Integer> map = new HashMap<>();
        for(int i = 0; i < s.length(); i++){
            for(int j = i + 1; j <= s.length(); j++){
                String str = s.substring(i, j);
                map.put(str, map.getOrDefault(str, 0) + 1);
            }
        } int ans = 0;
        for(String key: map.keySet()){
            int count = map.get(key);
            if(count >= 3){
                HashSet<Character> set = new HashSet<>();
                for(char ch: key.toCharArray()){
                    set.add(ch);
                }
                if(set.size() == 1){
                     ans = Math.max(ans, key.length());
                }
            }
        }
        return ans == 0 ? -1 : ans;
      
    }     
//optimal approach
 public int maximumLength(String s) {
        HashMap<String, Integer> map = new HashMap<>();
         int ans = 0;
        for(int i = 0; i < s.length(); i++){
            String str = "";
            for(int j = i; j < s.length(); j++){
                if(str.length() == 0 || s.charAt(j) == str.charAt(str.length() - 1)){
                    str += s.charAt(j);
                    map.put(str, map.getOrDefault(str, 0) + 1);   
                    if(map.get(str) >= 3){
                          ans = Math.max(ans, str.length());
                    }
                }
                else{
                    break;
                }
            }
        }
        return ans == 0 ? -1 : ans;
   }
