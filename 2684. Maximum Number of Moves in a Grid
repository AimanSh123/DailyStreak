//recursion
    public int maxMoves(int[][] grid) {
        int maxi = 0;
        for(int j = 0; j < grid.length; j++)
            maxi = Math.max(maxi,recursion(j,0,grid));
        return maxi;    
    }
    public int recursion(int i, int j, int[][] grid){
        int maxi = 0;
        if(j + 1 < grid[0].length && i - 1 >= 0 && grid[i][j] < grid[i-1][j+1]){
            maxi = Math.max(maxi,1 + recursion(i-1,j+1,grid)); 
        }
        if(j + 1 < grid[0].length && grid[i][j] < grid[i][j+1]){
            maxi = Math.max(maxi,1 + recursion(i,j+1,grid)); 
        }
        if(j + 1 < grid[0].length && i + 1 < grid.length && grid[i][j] < grid[i+1][j+1]){
            maxi = Math.max(maxi,1 + recursion(i+1,j+1,grid)); 
        }
        return maxi;
    }
//memoization
public int maxMoves(int[][] grid) {
        int maxi = 0;
        int [][] dp = new int[grid.length][grid[0].length];
        for(int[] row: dp){
            Arrays.fill(row,-1);
        }
        for(int i = 0; i < grid.length; i++){
            maxi = Math.max(maxi,recursion(grid,i,0,dp));
        }
        return maxi;
    }
    public int recursion(int[][] grid, int i, int j,int[][]dp){
        if(dp[i][j] != -1){
            return dp[i][j];
        }
        int maxi = 0;
        if(j + 1 < grid[0].length && i - 1 >= 0 && grid[i - 1][j + 1] > grid[i][j]){
            maxi = Math.max(maxi,1 + recursion(grid,i-1,j+1,dp));
        }
        if(j + 1 < grid[0].length && grid[i][j + 1] > grid[i][j]){
            maxi = Math.max(maxi,1 + recursion(grid,i,j+1,dp));
        }
        if(j + 1 < grid[0].length && i + 1 < grid.length && grid[i + 1][j + 1] > grid[i][j]){
            maxi = Math.max(maxi,1 + recursion(grid,i+1,j+1,dp));
        }
        return dp[i][j] = maxi;
    }
