//memoization
 public long maxEnergyBoost(int[] energyDrinkA, int[] energyDrinkB){
        int n = energyDrinkA.length;
        long[][] dp = new long[n][3];
        for(long [] row: dp){
            Arrays.fill(row,-1);
        }
        return recursion(dp,energyDrinkA,energyDrinkB,0,2);
    }  
    public long recursion(long[][]dp,int[]A,int[]B,int i,int choice){
        if(i == A.length)
          return 0;
        if(dp[i][choice] != -1)
          return dp[i][choice];  
        long ans = 0;
        if(choice == 0 || choice == 2){
            ans = Math.max(ans,A[i] + recursion(dp,A,B,i+1,0));
        }  
        if(choice == 1 || choice == 2){
            ans = Math.max(ans,B[i] + recursion(dp,A,B,i+1,1));
        }
        ans = Math.max(ans,recursion(dp,A,B,i+1,2));
        return dp[i][choice] = ans;
    } 
//optimal
  public long maxEnergyBoost(int[] energyDrinkA, int[] energyDrinkB) {
        int n = energyDrinkA.length;
        long[][] dp = new long[n + 1][3];
        for (int i = n - 1; i >= 0; i--) {
            for (int choice = 0; choice <= 2; choice++) {
                long ans = 0;
                if (choice == 0 || choice == 2) {
                    ans = Math.max(ans, energyDrinkA[i] + dp[i+1][0]);
                }
                if (choice == 1 || choice == 2) {
                    ans = Math.max(ans, energyDrinkB[i] + dp[i+1][1]);
                }
                ans = Math.max(ans, dp[i+1][2]);
                dp[i][choice] = ans;
            }
        }
        return dp[0][2];
    }
