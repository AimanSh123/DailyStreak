//using priorityqueue
public List<String> topKFrequent(String[] words, int k) {
        PriorityQueue<Pair> pq = new PriorityQueue<>((a, b) -> {
            if (a.occurrence == b.occurrence) {
                return a.word.compareTo(b.word);
            }
            return b.occurrence - a.occurrence;
        });

        Arrays.sort(words);
        int count = 1;

        for (int i = 1; i <= words.length; i++) {
            if (i < words.length && words[i - 1].equals(words[i])) {
                count++;
            } else {
                pq.add(new Pair(words[i - 1], count));
                count = 1;
            }
        }

        List<String> result = new ArrayList<>();
        while (!pq.isEmpty() && result.size() < k) {
            result.add(pq.poll().word);
        }

        return result;
    }

    public static class Pair {
        String word;
        int occurrence;

        public Pair(String word, int occurrence) {
            this.word = word;
            this.occurrence = occurrence;
        }
    }
//using map
  public List<String> topKFrequent(String[] words, int k) {
        PriorityQueue<Pair> pq = new PriorityQueue<>((a, b) -> {
            if (a.occurrence == b.occurrence) {
                return a.word.compareTo(b.word);
            }
            return b.occurrence - a.occurrence;
        });
        HashMap<String, Integer> map = new HashMap<>();
        for (int i = 0; i < words.length; i++) {
            map.put(words[i], map.getOrDefault(words[i], 0) + 1);
        }
        List<String> result = new ArrayList<>();
        for(HashMap.Entry<String, Integer> entry : map.entrySet()){
            pq.add(new Pair(entry.getKey(), entry.getValue()));
        }
        while (!pq.isEmpty() && result.size() < k) {
            result.add(pq.poll().word);
        }

        return result;
    }

    public static class Pair {
        String word;
        int occurrence;

        public Pair(String word, int occurrence) {
            this.word = word;
            this.occurrence = occurrence;
        }
    }
