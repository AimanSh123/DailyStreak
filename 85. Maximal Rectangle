  public int maximalRectangle(char[][] matrix) {
        int[] height = new int[matrix[0].length];
        int area = 0;
        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix[0].length; j++) {
                height[j] = matrix[i][j] == '0' ? 0 : height[j] + 1;
            }
            area = Math.max(area, maxArea(height));
        }
        return area;
    }

    public int maxArea(int[] heights) {
        int n = heights.length;
        int maxarea = 0;
        Stack<Integer> st = new Stack<>();
        for (int i = 0; i <= n; i++) {
            while (!st.isEmpty() && (i == n || heights[st.peek()] >= heights[i])) {
                int height = heights[st.pop()];
                int width;
                if (st.isEmpty())
                    width = i;
                else
                    width = i - st.peek() - 1;
                maxarea = Math.max(maxarea, height * width);
            }
            st.push(i);
        }
        r
