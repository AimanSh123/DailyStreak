//memoization
import java.util.*;

class Solution {
    public int jobScheduling(int[] startTime, int[] endTime, int[] profit) {
        int[][] jobs = new int[startTime.length][3];
        for (int i = 0; i < jobs.length; i++) {
            jobs[i][0] = startTime[i];
            jobs[i][1] = endTime[i];
            jobs[i][2] = profit[i];
        }
        Arrays.sort(jobs, Comparator.comparingInt(a -> a[0]));
        int [] dp = new int[jobs.length];
        Arrays.fill(dp, -1);
        return recursion(dp, jobs, 0);
    }

    public int recursion(int [] dp, int[][] jobs, int idx) {
        if (idx == jobs.length) {
            return 0;
        }
        if(dp[idx] != -1){
            return dp[idx];
        }

        int not_take = recursion(dp, jobs, idx + 1);
        int nextIdx = upperBound(jobs, idx);
        int take = jobs[idx][2] + recursion(dp, jobs, nextIdx);
        return dp[idx] = Math.max(not_take, take);
    }
     private int upperBound(int [][] jobs, int idx) {
        int low = idx + 1;
        int high = jobs.length - 1;

        while (low <= high) {
            int mid = (low + high) / 2;
            if (jobs[mid][0] < jobs[idx][1]) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }

        return low;
    }

}
//tabulation
import java.util.*;

class Solution {
    public int jobScheduling(int[] startTime, int[] endTime, int[] profit) {
        int[][] jobs = new int[startTime.length][3];
        for (int i = 0; i < jobs.length; i++) {
            jobs[i][0] = startTime[i];
            jobs[i][1] = endTime[i];
            jobs[i][2] = profit[i];
        }
        Arrays.sort(jobs, Comparator.comparingInt(a -> a[0]));
        int [] dp = new int[jobs.length + 1];
        for(int i = jobs.length - 1; i >= 0; i--){
            int not_take = dp[i + 1];
            int nextIdx = upperBound(jobs, i);;
            int take = jobs[i][2] + dp[nextIdx];
            dp[i] = Math.max(not_take, take);
        }
        return dp[0];
    }

    private int upperBound(int [][] jobs, int idx) {
        int low = idx + 1;
        int high = jobs.length - 1;

        while (low <= high) {
            int mid = (low + high) / 2;
            if (jobs[mid][0] < jobs[idx][1]) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }

        return low;
    }

}
