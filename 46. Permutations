   public List<List<Integer>> permute(int[] nums) {
        boolean [] visited = new boolean[nums.length];
        List<List<Integer>> list = new ArrayList<>();
        backtrack(nums, visited, list, new ArrayList<>());
        return list;
    }
    public void backtrack(int[]nums,boolean[]visited,List<List<Integer>>list,List<Integer> curr){
        if(curr.size() == nums.length){
            list.add(new ArrayList<>(curr));
            return;
        }
        for(int i = 0; i <nums.length; i++){
            if(!visited[i]){
                visited[i] = true; 
                curr.add(nums[i]);
                backtrack(nums, visited,list,curr);
                curr.remove(curr.size() - 1);
                visited[i] = false;
            }
        }

    }
