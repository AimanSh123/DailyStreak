  int count = 0;
    public boolean canTraverseAllPairs(int[] nums) {
        int n = nums.length;
        //lets make the reverse map
        List<List<Integer>> graph = new ArrayList<>();
        HashMap<Integer, HashSet<Integer>> reverse_map = new HashMap<>();
        for(int i = 0; i < n; i++){
            graph.add(new ArrayList<>());
            for(int el : getFactors(nums[i]){
                if(!reverse_map.containsKey(el)){
                    HashSet<Integer> set = new HashSet<>();
                    reverse_map.put(el, set);
                }
                reverse_map.get(el).add(i);
            }
        }
        for(HashSet<Integer>tempSet:reverse_map.values()){
            List<Integer> temp = new ArrayList<>(tempSet);
            for(int i=1;i<temp.size();i++){
                graph.get(temp.get(i-1)).add(temp.get(i));
                graph.get(temp.get(i)).add(temp.get(i-1));
            }
        }
        boolean [] visited = new boolean[n];
        count = 0;
        dfs(graph, visited, 0);
        return count == n;
    }
    public void dfs(List<List<Integer>> graph, boolean [] visited, int sr){
        visited[sr] = true;
        count++;
        for(int neigh : graph.get(sr)){
            if(!visited[neigh]){
                dfs(graph,visited,neigh);
            }
        }
    }
    public List<Integer> getFactors(int x){
        List<Integer> set = new ArrayList<>();
        for(int i = 2; i * i <= x; i++){
            while(x % i == 0){
                set.add(i);
                x /= i;
            }
        }
        if(x > 1){
            set.add(x);
        }
        return set;
    } 
