  int[] dx = { -1, 0, 0, 1 };
    int[] dy = { 0, -1, 1, 0 };

    public int getMaximumGold(int[][] grid) {
        int maxi = 0; // Change from Integer.MIN_VALUE to 0
        int n = grid.length;
        int m = grid[0].length;
        boolean[][] visited = new boolean[n][m];

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (grid[i][j] != 0) {
                    maxi = Math.max(maxi, dfs(visited, grid, i, j));
                }
            }
        }
        return maxi;
    }

    public int dfs(boolean[][] visited, int[][] grid, int i, int j) {
        visited[i][j] = true;
        int curr_max = 0;

        for (int k = 0; k < 4; k++) {
            int row = i + dx[k];
            int col = j + dy[k];

            if (row >= 0 && row < grid.length && col >= 0 && col < grid[0].length &&
                    !visited[row][col] && grid[row][col] != 0) {
                curr_max = Math.max(curr_max, dfs(visited, grid, row, col));
            }
        }

        visited[i][j] = false; 
        return grid[i][j] + curr_max;
    }
