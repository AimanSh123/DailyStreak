//my approach
 public List<List<Integer>> findWinners(int[][] matches) {
        List<List<Integer>> list = new ArrayList<>();
        Arrays.sort(matches, (a, b) -> Integer.compare(a[0], b[0]));
        List<Integer> ans1 = new ArrayList<>();//not lost
        List<Integer> ans2 = new ArrayList<>();//lost once
        HashMap<Integer, Integer> map = new HashMap<>();
        for(int i = 0; i < matches.length; i++){
            map.put(matches[i][1], map.getOrDefault(matches[i][1], 0) + 1);
        }
        System.out.println(map);
        for(int i = 0; i < matches.length; i++){
            if(i >= 1 && matches[i][0] == matches[i-1][0]){
            }
            else if(!map.containsKey(matches[i][0])){
                ans1.add(matches[i][0]);
            }
            if(map.get(matches[i][1]) == 1){
                 ans2.add(matches[i][1]);
            }
        }
        Collections.sort(ans2);
        list.add(ans1); list.add(ans2);
        return list;
    }
//using treeset and treemap
import java.util.Map;
class Solution {
    public List<List<Integer>> findWinners(int[][] matches) {
        List<List<Integer>> list = new ArrayList<>();
        List<Integer> ans1 = new ArrayList<>();//not lost
        List<Integer> ans2 = new ArrayList<>();//lost once
        TreeSet<Integer> set_win = new TreeSet<>();
        TreeMap<Integer, Integer> map_lose = new TreeMap<>();
        for(int i = 0; i < matches.length; i++){
            map_lose.put(matches[i][1], map_lose.getOrDefault(matches[i][1], 0) + 1);
            set_win.add(matches[i][0]);
        }
        for(int el : set_win){
            if(!map_lose.containsKey(el)){
                ans1.add(el);
            }
        }
        for(Map.Entry<Integer,Integer> entry : map_lose.entrySet()){
            if(entry.getValue() == 1){
                ans2.add(entry.getKey());
            }
        }
        list.add(ans1); list.add(ans2);
        return list;
    }
}
