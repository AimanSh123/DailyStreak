  public boolean canFinish(int numCourses, int[][] prerequisites) {
        List<List<Integer>> graph = new ArrayList<>();
        for(int i = 0; i < numCourses; i++){
            graph.add(new ArrayList<>());
        }   
        for(int [] oneSeq : prerequisites){
            graph.get(oneSeq[1]).add(oneSeq[0]);
        }
        //count inDegree
        int [] inDegree = new int[numCourses];
        for(List<Integer> node: graph){
            for(int neigh: node){
               inDegree[neigh]++;
            }
        }Queue<Integer> q = new ArrayDeque<>();
        for(int i = 0; i < inDegree.length; i++){
            if(inDegree[i] == 0){
                q.add(i);
            }
        }
        List<Integer> topo = new ArrayList<>();
        while(!q.isEmpty()){
            int node = q.remove();
            topo.add(node);
            for(int neigh : graph.get(node)){
                inDegree[neigh]--;
                if(inDegree[neigh] == 0){
                    q.add(neigh);
                }
            }
        }
        if(topo.size() < numCourses){
            return false;
        }
        return true;
    }
