//brute approach
 public List<List<Integer>> findMatrix(int[] nums) {
        List<HashSet<Integer>> list = new ArrayList<>();
        for(int i = 0; i < nums.length; i++){
            int j = 0;
            while(j < list.size() && list.get(j).contains(nums[i])){
                j++;
            }
            if(j < list.size()){
                list.get(j).add(nums[i]);
            }
            else{
                HashSet<Integer> set = new HashSet<>();
                set.add(nums[i]);
                list.add(set);
            }
        }
        List<List<Integer>> resultList = new ArrayList<>();
        for (HashSet<Integer> set : list) {
            resultList.add(new ArrayList<>(set));
        }
        return resultList;
    }
//better approach
 public List<List<Integer>> findMatrix(int[] nums) {
        List<List<Integer>> list = new ArrayList<>();
        Arrays.sort(nums);
        for(int i = 0; i < nums.length; i++){
            int j = 0;
            while(j < list.size() && list.get(j).get(list.get(j).size() - 1) == nums[i]){
                j++;
            }
            if(j < list.size()){
                list.get(j).add(nums[i]);
            }
            else{
                List<Integer> list_in = new ArrayList<>();
                list_in.add(nums[i]);
                list.add(list_in);
            }
        }
         return list;
    }
//using hashmap
 public List<List<Integer>> findMatrix(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        Map<Integer, Integer> countMap = new HashMap<>();
        for (int num : nums) {
            countMap.put(num, countMap.getOrDefault(num, 0) + 1);
        }

        while (!countMap.isEmpty()) {
            List<Integer> temp = new ArrayList<>();
            for(Iterator<Map.Entry<Integer, Integer>> iterator = countMap.entrySet().iterator(); iterator.hasNext();) {
                Map.Entry<Integer, Integer> entry = iterator.next();
                temp.add(entry.getKey());
                entry.setValue(entry.getValue() - 1);
                if (entry.getValue() == 0) {
                   iterator.remove(); 
                }
            }
            ans.add(temp);
        }

        return ans;
    }
