//using sorting
  public int singleNumber(int[] nums) {
        if(nums.length == 1){
            return nums[0];
        }
        Arrays.sort(nums); 
        if(nums[0] != nums[1]){
            return nums[0];
        }
        for(int i = 1; i < nums.length - 1; i += 3){
            if(nums[i-1] != nums[i]){
                return nums[i - 1];
            }
        }
        return nums[nums.length - 1];
    }
//counting set bits
  public int singleNumber(int[] nums) {
        int ans = 0;
        for (int i = 0; i < 32; i++) {
            int contOdd = 0;
            int contEven = 0;
            for (int j = 0; j < nums.length; j++) {
                if ((nums[j] & (1 << i)) != 0) {
                    contOdd++;
                }
            }
            if(contOdd % 3 == 1){
                ans  = ans + (1<<i);
            }
        }
        return ans;
    }
//bit manipulation
  public int singleNumber(int[] nums) {
        int ones = 0; int twos = 0;
        for (int i = 0; i < nums.length; i++) {
            ones = ((nums[i] ^ ones) & ~twos);
            twos = ((nums[i] ^ twos) & ~ones);
        }
        return ones;
    }
