//brute force
  public int longestCommonSubsequence(String text1, String text2) {
        return recursion(0, 0, text1, text2, 0);
    }
    public int recursion(int i, int j, String s, String t, int len){
        if(i == s.length() || j == t.length()){
            return len;
        }
        int take = 0;
        if(s.charAt(i) == t.charAt(j)){
            take = recursion(i + 1, j + 1, s, t, len + 1);
        }
        int notTak1 = recursion(i + 1, j, s, t, len);
        int notTak2 = recursion(i, j + 1, s, t, len);
        return Math.max(take, Math.max(notTak1, notTak2));
    }
//memoization
public int longestCommonSubsequence(String text1, String text2) {
        int [][] dp = new int[text1.length()][text2.length()];
        for(int i = 0; i < dp.length; i++){
            Arrays.fill(dp[i], -1);
        }
        return recursion(0, 0, text1, text2, 0, dp);
    }
    public int recursion(int i, int j, String s, String t, int len,int [][] dp){
        if(i == s.length() || j == t.length()){
            return len;
        }
        if(dp[i][j] != -1){
            return dp[i][j];
        }
        int take = 0;
        if(s.charAt(i) == t.charAt(j)){
            take = recursion(i + 1, j + 1, s, t, len + 1, dp);
        }
        int notTak1 = recursion(i + 1, j, s, t, len, dp);
        int notTak2 = recursion(i, j + 1, s, t, len, dp);
        return Math.max(take, Math.max(notTak1, notTak2));
    }
//tabulation
 public int longestCommonSubsequence(String text1, String text2) {
        int [][] dp = new int[text1.length() + 1][text2.length() + 1];
        for(int i = text1.length() - 1; i >= 0; i--){
            for(int j = text2.length() - 1; j >= 0; j--){
                int take = 0;
                if(text1.charAt(i) == text2.charAt(j)){
                    take = dp[i+1][j+1] + 1;
                }
                int notTak1 = dp[i+1][j];
                int notTak2 = dp[i][j+1];
                dp[i][j] = Math.max(take, Math.max(notTak1, notTak2));
            }
        }    
        return dp[0][0];
    }
   
