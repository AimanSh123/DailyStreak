 public List<Integer> findAllPeople(int n, int[][] meetings, int firstPerson) {
        List<List<Pair>> graph = new ArrayList<>();
        for(int i = 0; i < n; i++){
            graph.add(new ArrayList<>());
        }
        for(int i = 0; i < meetings.length; i++){
            graph.get(meetings[i][0]).add(new Pair(meetings[i][1],meetings[i][2]));
            graph.get(meetings[i][1]).add(new Pair(meetings[i][0],meetings[i][2]));
        
        }
        PriorityQueue<Pair> pq = new PriorityQueue<>((a,b)->a.time-b.time);
        pq.add(new Pair(0,0));
        pq.add(new Pair(firstPerson,0));
        List<Integer> sol = new ArrayList<>();
        boolean [] visited = new boolean[n];
        while(!pq.isEmpty()){
            Pair p = pq.remove();
            visited[p.dest] = true;
            int destination = p.dest;
            for(Pair neigh : graph.get(p.dest)){
                if(!visited[neigh.dest] && p.time <= neigh.time){
                    pq.add(new Pair(neigh.dest,neigh.time));
                }
            }
        }
        for(int i = 0;i < visited.length;i++){
            if(visited[i]){
              sol.add(i);
            }
        }
        return sol;
    }
    public class Pair{
        int dest, time;
        Pair(int dest, int time){
            this.dest = dest;
            this.time = time;
        }
    }
