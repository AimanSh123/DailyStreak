class Solution {
    public long findScore(int[] nums) {
        HashSet<Integer> set = new HashSet<>();
        PriorityQueue<Pair> pq = new PriorityQueue<>((a,b)->{
            if(a.value == b.value) return a.idx - b.idx;
            return a.value - b.value;
        });
        for (int i = 0; i < nums.length; i++) {
            pq.add(new Pair(nums[i], i));
        }
        long ans = 0;
        while(!pq.isEmpty()){
            Pair p = pq.remove();
            if(!set.contains(p.idx)){
                set.add(p.idx);
                ans += p.value;
                if(p.idx - 1 >= 0 && !set.contains(p.idx - 1)){
                     set.add(p.idx - 1);
                }
                if(p.idx + 1 < nums.length && !set.contains(p.idx+1)){
                     set.add(p.idx + 1);
                }
            }
        }
        return ans;        
    }
    class Pair{
        int value; int idx;
        Pair(int value, int idx){
            this.idx = idx;
            this.value = value;
        }
    }
}
