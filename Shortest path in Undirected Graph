  public int[] shortestPath(int[][] edges,int n,int m ,int src) {
        // Code here
        List<List<Integer>> graph = new ArrayList<>();
        for(int i = 0; i < n; i++){
            graph.add(new ArrayList<>());
        }
        for(int[] edge: edges){
            graph.get(edge[0]).add(edge[1]);
            graph.get(edge[1]).add(edge[0]);
        }
        int[] dist = new int[n];
        Arrays.fill(dist,Integer.MAX_VALUE);
        Queue<Integer> q = new ArrayDeque<>();
        q.add(src);
        dist[src] = 0;int level = 0;
        while(!q.isEmpty()){
            int size = q.size();
            level++;
            for(int i = 0; i < size; i++){
                int node = q.remove();
                for(int neigh : graph.get(node)){
                    if(dist[neigh] == Integer.MAX_VALUE){
                        dist[neigh] = level;
                        q.add(neigh);
                    }
                }
            }
        }
        for(int i = 0; i < n; i++){
            if(dist[i] == Integer.MAX_VALUE) dist[i] = -1;
        }
        return dist;
        
        
    }
