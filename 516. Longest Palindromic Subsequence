//memoization
public int longestPalindromeSubseq(String s) {
        String s2 = "";
         for(int i = s.length() - 1; i >= 0; i--){
            s2 += s.charAt(i);
         }    
        int [][] dp = new int[s.length()][s2.length()];
        for(int [] curr : dp){
            Arrays.fill(curr, -1);
        }
        return recursion(dp, 0, 0, s, s2);
    }
    int recursion(int [][] dp, int i, int j, String s, String t){
        if(i == s.length() || j == t.length()){
            return 0;
        }
        int take = 0;
        if(s.charAt(i) == t.charAt(j)){
            take = 1 + recursion(dp, i + 1, j + 1, s, t);
        }
        int notTake1 = recursion(dp, i + 1, j, s, t);
        int notTake2 = recursion(dp, i, j + 1, s, t);
        return Math.max(take, Math.max(notTake1, notTake2));
    }

//tabulation
 public int longestPalindromeSubseq(String s) {
        String s2 = "";
        for (int i = s.length() - 1; i >= 0; i--) {
            s2 += s.charAt(i);
        }
        int[][] dp = new int[s.length() + 1][s2.length() + 1];
        for(int i = s.length() - 1; i >= 0; i--){
            for(int j = s2.length() - 1; j >= 0; j--){
                int take = 0;
                if(s.charAt(i) == s2.charAt(j)) {
                   take = 1 + dp[i+1][j+1];
                }
                int notTake1 = dp[i+1][j];
                int notTake2 = dp[i][j+1];
                dp[i][j] = Math.max(take, Math.max(notTake1, notTake2));
            }
        }
        return dp[0][0];
    }
