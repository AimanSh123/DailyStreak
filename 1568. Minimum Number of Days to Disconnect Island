 public int minDays(int[][] grid) {
        int islands = findIsland(grid);
        if(islands == 0 || islands > 1) return 0;
        for(int i = 0; i < grid.length; i++){
            for(int j = 0; j < grid[0].length; j++){
                if(grid[i][j] == 1){
                    grid[i][j] = 0;
                    islands = findIsland(grid);
                    if(islands == 0 || islands > 1) return 1;
                    grid[i][j] = 1;
                }
            }
        }
        return 2;
    }
    public int findIsland(int[][]grid){
        int n = grid.length; int m = grid[0].length;
        boolean[][]visited = new boolean[n][m];
        int count = 0;
        for(int i = 0; i < n; i++){
            for(int j = 0; j < m; j++){
                if(!visited[i][j] && grid[i][j] == 1){
                    dfs(grid,i,j,visited);
                    count++;
                }
            }
        }
        return count;
    }
    public void dfs(int[][]grid,int i,int j,boolean[][]visited){
        visited[i][j] = true;
        if(i + 1 < grid.length && !visited[i+1][j] && grid[i+1][j] == 1){
            dfs(grid,i+1,j,visited);
        }
        if(i - 1 >= 0 && !visited[i-1][j] && grid[i-1][j] == 1){
            dfs(grid,i-1,j,visited);
        }
        if(j - 1 >= 0 && !visited[i][j-1] && grid[i][j-1] == 1){
            dfs(grid,i,j-1,visited);
        }
        if(j + 1 < grid[0].length && !visited[i][j+1] && grid[i][j+1] == 1){
            dfs(grid,i,j+1,visited);
        }
    }
