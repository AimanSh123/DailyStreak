//memoization
public String countAndSay(int n) {
        String [] dp = new String[n+1];
        return recursion(n,dp);
    }
    public String recursion(int n,String[]dp){
        if(n == 1){
            return "1";
        }
        if(dp[n] != null){
            return dp[n];
        }
        String sol = ""; int i = 0;
        String prev = recursion(n-1,dp);
        while(i < prev.length()){
            int cnt = 1;
            while(i + 1 < prev.length() && prev.charAt(i)==prev.charAt(i+1)){
               cnt++; i++;
            }
            sol += cnt + "" + prev.charAt(i);
            i++;
        }
        return dp[n] = sol;
    }
//tabulation
  public String countAndSay(int n) {
        String [] dp = new String[n+1];
        dp[1] = "1"; 
        for(int i = 2; i <= n; i++){
            String sol = ""; String prev = dp[i-1];
            int j = 0;
            while(j < prev.length()){
                int cnt = 1;
                while(j + 1 < prev.length() && prev.charAt(j)==prev.charAt(j+1)){
                      cnt++; j++;
                }
                sol += cnt + "" + prev.charAt(j);
                j++;
            }
            dp[i] = sol;
        }
        return dp[n];
    }
