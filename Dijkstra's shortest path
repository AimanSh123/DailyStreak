  public static List<Integer> dijkstra(int[][] edge,int vertices, int edges,int source){
        // Write your code here.
        List<Integer> dist = new ArrayList<>();
        List<List<Pair>> graph = new ArrayList<>();
        Collections.fill(dist, Integer.MAX_VALUE);
        for(int i = 0; i < vertices; i++){
            graph.add(new ArrayList<>());
            dist.add(Integer.MAX_VALUE);
        }
        for(int i = 0; i < edge.length; i++){
            graph.get(edge[i][0]).add(new Pair(edge[i][1],edge[i][2]));
            graph.get(edge[i][1]).add(new Pair(edge[i][0],edge[i][2]));
        }
        PriorityQueue<Pair> pq = new PriorityQueue<>((a,b)->a.wt-b.wt);
        pq.add(new Pair(source,0));
        dist.set(source, 0);
        while(!pq.isEmpty()){
            Pair p = pq.remove();
            int distance = p.wt;
            int node = p.dst;
            for(Pair neigh : graph.get(node)){
                if(dist.get(neigh.dst) > distance + neigh.wt){
                    dist.set(neigh.dst,distance + neigh.wt);
                    pq.add(new Pair(neigh.dst,distance + neigh.wt));
                }
            }
        }
        return dist;
    }
    static class Pair{
        int dst; int wt;
        Pair(int dst, int wt){
            this.dst = dst; this.wt = wt;
        }
    }
