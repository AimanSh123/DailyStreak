 public int maximumSafenessFactor(List<List<Integer>> grid) {
        //multisource traversal
        int [] dx = {0,-1,1,0};
        int [] dy = {1,0,0,-1};
        Queue<Pair> q = new ArrayDeque<>();
        int n = grid.size();
        int [][] safFac = new int[n][n];
        for (int[] row : safFac) {
            Arrays.fill(row, Integer.MAX_VALUE);
        }
           for(int i = 0; i < n; i++){
            for(int j = 0; j < n; j++){
                if(grid.get(i).get(j) == 1){
                    q.add(new Pair(i,j));
                    safFac[i][j] = 0;
                }
            }
        }
        while(!q.isEmpty()){
            Pair p = q.remove();
            for(int k = 0; k < 4; k++){
                int row = p.i + dx[k]; int col = p.j + dy[k];
                if(row >= 0 && col >= 0 && row < n && col < n && safFac[row][col] > safFac[p.i][p.j] + 1){
                    safFac[row][col] = safFac[p.i][p.j] + 1;
                     q.add(new Pair(row,col));
                }
            }
        }
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> b[0] - a[0]);
        pq.add(new int[]{safFac[0][0], 0, 0}); 
        boolean [][] visited = new boolean[n][n];
        visited[0][0] = true;
        while(!pq.isEmpty()){
            int[] pair = pq.poll();
            int safe = pair[0], i = pair[1], j = pair[2];
            if(i == n - 1 && j == n - 1){
                return safe;
            }
            for(int k = 0; k < 4; k++){
                int row = i + dx[k]; int col = j + dy[k];
                if(row >= 0 && col >= 0 && row < n && col < n && !visited[row][col]){
                    visited[row][col] = true;
                    int curr_saf = Math.min(safe,safFac[row][col]);
                     pq.add(new int[]{curr_saf, row, col});
               }      
            }

        }
        return 0;
    }
    class Pair{
        int i; int j;
        Pair(int i, int j){
            this.i = i; this.j = j;
        }
    }
